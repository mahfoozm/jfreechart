/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 04 01:57:50 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartElementVisitor;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.legend.LegendItemCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.util.ShadowGenerator;
import org.jfree.data.Range;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Second;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CombinedDomainXYPlot_ESTest extends CombinedDomainXYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainXYPlot0.zoomRangeAxes(1567.5115, (double) 10, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("x}cCr*B{Mv&Jg");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D point2D0 = combinedDomainXYPlot1.getQuadrantOrigin();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1, 500);
      combinedDomainXYPlot0.zoomRangeAxes((double) 2.0F, plotRenderingInfo0, point2D0, true);
      assertEquals(500, combinedDomainXYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require weight >= 1.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      combinedDomainXYPlot0.setRangePannable(false);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartElementVisitor chartElementVisitor0 = mock(ChartElementVisitor.class, new ViolatedAssumptionAnswer());
      combinedDomainXYPlot0.receive(chartElementVisitor0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      XYSeries<Integer> xYSeries0 = new XYSeries<Integer>((Integer) 10, false, true);
      XYSeriesCollection<Integer> xYSeriesCollection0 = new XYSeriesCollection<Integer>(xYSeries0);
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYSeriesCollection0, periodAxis0, (ValueAxis) null, xYBubbleRenderer0);
      combinedDomainXYPlot0.add(xYPlot0);
      assertEquals(1, xYPlot0.getWeight());
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 212);
      assertEquals(212, combinedRangeXYPlot0.getWeight());
      
      BufferedImage bufferedImage0 = new BufferedImage(2401, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      BufferedImage bufferedImage0 = new BufferedImage(2401, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point point0 = new Point(10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.addSubplotInfo((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PlotRenderingInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(1986.2296129928816, (PlotRenderingInfo) null, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.addSubplotInfo((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 0, (double) 0, plotRenderingInfo0, (Point2D) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PlotRenderingInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, (double) 10, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.remove((XYPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.panRangeAxes(5.0, (PlotRenderingInfo) null, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick(10, 10, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.findSubplot((PlotRenderingInfo) null, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.draw((Graphics2D) null, (Rectangle2D) null, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.api.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.datasetChanged((DatasetChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(767, 334);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 10, (-91.81483F), (-2808.5999F));
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      // Undeclared exception!
      combinedDomainXYPlot1.calculateAxisSpace(graphics2D0, rectangle0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(defaultOHLCDataset0, (-2431.925017292));
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYBarDataset0, (ValueAxis) null, (ValueAxis) null, cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add(xYPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add((XYPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("subplot");
      Class<Integer> class0 = Integer.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = null;
      try {
        combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("9(YY}5yXR&}m", (Range) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = null;
      try {
        combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      boolean boolean0 = combinedDomainXYPlot0.equals(1.0F);
      assertFalse(boolean0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      
      combinedDomainXYPlot0.setFixedRangeAxisSpaceForSubplots((AxisSpace) null);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(10, 212);
      combinedDomainXYPlot0.findSubplot(plotRenderingInfo0, point0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedDomainXYPlot1.add((XYPlot) combinedDomainXYPlot0, 10);
      assertEquals(10, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot0.getDataRange((ValueAxis) null);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot1.add((XYPlot) combinedDomainXYPlot0);
      boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot1.add((XYPlot) combinedDomainXYPlot0);
      combinedDomainXYPlot1.setRangePannable(true);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(histogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer0);
      combinedDomainXYPlot0.add(xYPlot0);
      assertEquals(1, xYPlot0.getWeight());
      
      Object object0 = new Object();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(object0, histogramDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot1, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.handleClick(500, 2316, plotRenderingInfo0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) null);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      combinedDomainXYPlot0.panRangeAxes(5.0, plotRenderingInfo0, point0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-1), (-1));
      Point2D point2D0 = combinedDomainXYPlot1.getQuadrantOrigin();
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.draw(graphics2D0, rectangle0, point2D0, plotState0, plotRenderingInfo0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, (-2181.5F), 10);
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, rectangle0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0);
      combinedDomainXYPlot0.remove(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("x}cCr*B{Mv&Jg");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1, 500);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot0.remove(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      combinedDomainXYPlot0.remove(combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.isSubplot());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot1.clearDomainAxes();
      combinedDomainXYPlot1.add((XYPlot) combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require weight >= 1.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot1.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      combinedDomainXYPlot1.setShadowGenerator((ShadowGenerator) null);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.isNotify());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangePannable();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("x}cCr*B{Mv&Jg");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      combinedDomainXYPlot0.getSubplots();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.receive((ChartElementVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-896.3));
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(cyclicNumberAxis0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      
      combinedDomainXYPlot0.setGap(0.0);
      double double0 = combinedDomainXYPlot0.getGap();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point point0 = new Point();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis("", hour0, hour0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(periodAxis0);
      double double0 = combinedDomainXYPlot0.getGap();
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
  }
}
