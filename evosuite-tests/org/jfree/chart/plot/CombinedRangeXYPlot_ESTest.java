/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 04 01:56:12 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.ChartElementVisitor;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.legend.LegendItemCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.ShadowGenerator;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CombinedRangeXYPlot_ESTest extends CombinedRangeXYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.handleClick(1139, 10, plotRenderingInfo0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot0, (-1591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'weight' must be positive.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot1.add((XYPlot) combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      combinedRangeXYPlot1.setDomainPannable(true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Color color0 = Color.getHSBColor(10, 4.0F, (-2.0F));
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(10, color0, 3.4028235E38F, 0, 4.0F);
      combinedRangeXYPlot0.setShadowGenerator(defaultShadowGenerator0);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.setFixedDomainAxisSpaceForSubplots((AxisSpace) null);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(logAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(370.6289F, 370.6289F);
      combinedRangeXYPlot0.zoomDomainAxes((-616.44866313236), plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2058.4));
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(23.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((-1455.175333), (double) 10, (PlotRenderingInfo) null, (Point2D) point2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.remove((XYPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.receive((ChartElementVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.panDomainAxes(225.592737539, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.handleClick((-1037), 1948, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(10, 10);
      Rectangle rectangle0 = new Rectangle(10, 10, 1266, 10);
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, rectangle0, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.add((XYPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("The 'weight' must be positive.", (Range) null);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = null;
      try {
        combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(10, false);
      boolean boolean0 = combinedRangeXYPlot0.equals(clusteredXYBarRenderer0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot0);
      assertTrue(boolean0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      combinedRangeXYPlot0.getDataRange((ValueAxis) null);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.findSubplot(plotRenderingInfo0, point0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.getSubplots();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = combinedRangeCategoryPlot0.getRangeAxisForDataset(1261);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(valueAxis0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedRangeXYPlot0);
      combinedRangeXYPlot0.plotChanged(plotChangeEvent0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>();
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(logAxis0);
      combinedRangeXYPlot0.setGap(0.05);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-742.4655177821469), "");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      Object object0 = combinedRangeXYPlot1.clone();
      boolean boolean0 = combinedRangeXYPlot0.equals(object0);
      assertEquals(0.05, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.handleClick(0, 0, plotRenderingInfo0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(customXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) xYAreaRenderer2_0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point point0 = new Point(10, 10);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panDomainAxes(0.05, plotRenderingInfo0, point0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot1.add((XYPlot) combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D point2D0 = combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot1.zoomDomainAxes(315.0, (double) 1.0F, plotRenderingInfo0, point2D0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      File file0 = MockFile.createTempFile("e']#d!Px{)", "nBKKtYa|Ucvd");
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(file0);
      MouseEvent mouseEvent0 = new MouseEvent(mockJFileChooser0, 50, 10, 10, 10, 1800, 1, false);
      Point point0 = mouseEvent0.getLocationOnScreen();
      combinedRangeXYPlot0.zoomDomainAxes(5.0, plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot1.add((XYPlot) combinedRangeXYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("%7 #", combinedRangeXYPlot1);
      jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6, chartRenderingInfo0);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot1 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.calculateAxisSpace(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      combinedRangeXYPlot0.remove(combinedRangeXYPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      combinedRangeXYPlot0.remove(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'weight' must be positive.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainPannable();
      assertFalse(boolean0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.getPlotType();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartElementVisitor chartElementVisitor0 = mock(ChartElementVisitor.class, new ViolatedAssumptionAnswer());
      combinedRangeXYPlot0.receive(chartElementVisitor0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      
      combinedRangeXYPlot0.setShadowGenerator((ShadowGenerator) null);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>((ValueAxis) null);
      double double0 = combinedRangeXYPlot0.getGap();
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      combinedRangeXYPlot0.add(xYPlot0);
      assertEquals(1, xYPlot0.getWeight());
      
      JFreeChart jFreeChart0 = new JFreeChart("%7 #", combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(3302, 1727, (ChartRenderingInfo) null);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) xYShapeRenderer0.ZERO, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }
}
