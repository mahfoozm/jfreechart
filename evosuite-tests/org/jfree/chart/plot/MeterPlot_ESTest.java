/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 04 02:03:10 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPasswordField;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.legend.LegendTitle;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MeterPlot_ESTest extends MeterPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = new Range(10.0F, 10);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setMeterAngle(360);
      assertEquals(360, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      meterPlot0.drawTicks((Graphics2D) null, rectangle2D0, 3.0, 0.0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 10, chartRenderingInfo0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RescaleOp rescaleOp0 = new RescaleOp((-346.6F), (-2465.5933F), renderingHints0);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      meterPlot0.drawTick(graphics2D0, rectangle2D0, 50.0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("uC+cT9fe<{r8RWK~V!", meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((-1672.0F), (-1217.9F), 0.0F, 0.5F);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      Point2D.Float point2D_Float0 = new Point2D.Float((-1672.0F), (-1459.8501F));
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      meterPlot0.draw(graphics2D0, rectangle2D_Float0, point2D_Float0, plotState0, plotRenderingInfo0);
      assertEquals((-1660.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1217.6500244140625), rectangle2D_Float0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      double double0 = meterPlot0.valueToAngle(506.8);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals((-1143.3600000000001), double0, 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(false);
      boolean boolean0 = meterPlot0.getTickLabelsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      meterPlot0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      Font font0 = meterPlot0.getTickLabelFont();
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(font0.isPlain());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getLegendItems();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDrawBorder(true);
      boolean boolean0 = meterPlot0.getDrawBorder();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      meterPlot0.setDialOutlinePaint(color0);
      Color color1 = (Color)meterPlot0.getDialOutlinePaint();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(0, color1.getGreen());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDataset();
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setValuePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setValueFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setNeedlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setDialShape((DialShape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot.localizationResources = null;
      // Undeclared exception!
      try { 
        meterPlot0.getPlotType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = Color.magenta;
      // Undeclared exception!
      try { 
        meterPlot0.fillArc((Graphics2D) null, rectangle2D_Double0, (-4282.090721125), 0.0, color0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 270, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        meterPlot0.fillArc(graphics2D0, rectangle2D_Double0, 1280.382735073, 0.0, (Paint) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDrawingSupplier((DrawingSupplier) null);
      MeterPlot meterPlot1 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.equals(meterPlot1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        meterPlot0.drawTicks((Graphics2D) null, rectangle2D0, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 270);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        meterPlot0.drawTick(graphics2D0, (Rectangle2D) null, 0.5F, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Dimension dimension0 = new Dimension(270, (-2146475696));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createUnion(rectangle0);
      // Undeclared exception!
      try { 
        meterPlot0.drawTick((Graphics2D) null, rectangle2D0, 0.5F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category> defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category>();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      MeterInterval meterInterval0 = new MeterInterval("", range0, meterPlot0.DEFAULT_OUTLINE_PAINT, meterPlot0.DEFAULT_OUTLINE_STROKE, meterPlot0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        meterPlot0.drawArcForInterval((Graphics2D) null, rectangle2D_Double0, meterInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        meterPlot0.drawArc((Graphics2D) null, rectangle0, 1.0F, 270, meterPlot0.DEFAULT_BACKGROUND_PAINT, meterPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("uC+cT9fe<{r8RWK~V!", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      // Undeclared exception!
      try { 
        meterPlot0.drawArc(graphics2D0, rectangle2D0, 0.5F, 0.5F, legendTitle0.DEFAULT_ITEM_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 270, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        meterPlot0.draw(graphics2D0, (Rectangle2D) null, (Point2D) null, plotState0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.api.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDataset((ValueDataset) null);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = meterPlot0.getDataset();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertNotNull(valueDataset0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      double double0 = meterPlot0.valueToAngle(1.0F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(222.3, double0, 0.01);
      assertTrue(meterPlot0.isValueVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      meterPlot1.setMeterAngle(10);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertEquals(10, meterPlot1.getMeterAngle());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = new MeterPlot();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot1.setTickLabelPaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      Object object0 = meterPlot0.clone();
      boolean boolean0 = meterPlot1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setTickLabelsVisible(false);
      MeterPlot meterPlot1 = new MeterPlot();
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(meterPlot0.getTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot0.setTickPaint(meterPlot1.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot1.setValuePaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Paint paint0 = combinedDomainCategoryPlot0.getDomainCrosshairPaint();
      meterPlot0.setNeedlePaint(paint0);
      MeterPlot meterPlot1 = new MeterPlot();
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertEquals(270, meterPlot1.getMeterAngle());
      assertTrue(meterPlot1.isValueVisible());
      assertFalse(meterPlot1.equals((Object)meterPlot0));
      assertTrue(meterPlot1.getTickLabelsVisible());
      assertEquals("Units", meterPlot1.getUnits());
      assertFalse(boolean0);
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot1.setDialBackgroundPaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(meterPlot1.equals((Object)meterPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      DialShape dialShape0 = DialShape.PIE;
      meterPlot1.setDialShape(dialShape0);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot1.setDialOutlinePaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint[] paintArray0 = new Paint[1];
      Stroke[] strokeArray0 = new Stroke[0];
      Shape[] shapeArray0 = new Shape[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      Paint paint0 = defaultDrawingSupplier0.getNextOutlinePaint();
      defaultValueDataset0.removeChangeListener(meterPlot0);
      Object object0 = meterPlot0.clone();
      Range range0 = ValueAxis.DEFAULT_RANGE;
      JPasswordField jPasswordField0 = new JPasswordField("");
      Color color0 = jPasswordField0.getCaretColor();
      MeterInterval meterInterval0 = new MeterInterval("", range0, paint0, meterPlot0.DEFAULT_OUTLINE_STROKE, color0);
      assertTrue(meterPlot0.equals((Object)object0));
      
      meterPlot0.addInterval(meterInterval0);
      boolean boolean0 = defaultValueDataset0.hasListener(meterPlot0);
      assertFalse(boolean0);
      assertNotSame(meterPlot0, object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      Range range0 = ValueAxis.DEFAULT_RANGE;
      meterPlot1.setRange(range0);
      boolean boolean0 = meterPlot1.equals(meterPlot0);
      assertFalse(meterPlot1.equals((Object)meterPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals("Units", meterPlot0.getUnits());
      
      meterPlot0.setUnits("V6]iMqy18E]o0`");
      MeterPlot meterPlot1 = new MeterPlot();
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      assertTrue(meterPlot1.equals((Object)meterPlot0));
      
      meterPlot1.setNoDataMessageFont(meterPlot0.DEFAULT_LABEL_FONT);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
      assertFalse(meterPlot1.equals((Object)meterPlot0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot(defaultValueDataset0);
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertTrue(meterPlot1.isValueVisible());
      assertEquals(270, meterPlot1.getMeterAngle());
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
      assertEquals("Units", meterPlot1.getUnits());
      assertTrue(boolean0);
      assertTrue(meterPlot1.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("=YtQu=", meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 270, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        meterPlot0.drawValueLabel(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      meterPlot0.drawValueLabel(graphics2D0, rectangle2D_Double0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, meterPlot0);
      assertTrue(meterPlot0.isValueVisible());
      
      meterPlot0.setValueVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(270, 270, chartRenderingInfo0);
      assertFalse(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.5F, 10, 1.0F, 1316.9036F);
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      meterPlot0.drawTick(graphics2D0, rectangle0, (-1583.74397), true);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = new MeterPlot(defaultValueDataset0);
      meterPlot1.setDialOutlinePaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart("uC+cT9fe<{r8RWK~V!", meterPlot1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1, 270, chartRenderingInfo0);
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
      assertEquals(270, meterPlot1.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("uC+cT9fe<{r8RWK~V!", meterPlot0);
      DialShape dialShape0 = DialShape.CHORD;
      meterPlot0.setDialShape(dialShape0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      meterPlot0.fillArc(graphics2D0, rectangle0, (-46.336), 0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, false);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      DialShape dialShape0 = DialShape.PIE;
      meterPlot0.setDialShape(dialShape0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((Integer) 10, (Integer) 10);
      Stroke stroke0 = waferMapRenderer0.getDefaultStroke();
      meterPlot0.drawArc(graphics2D0, rectangle2D_Double0, 238.4257611932, 1926.77047671, (Paint) null, stroke0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category> defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category>();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      MeterInterval meterInterval0 = new MeterInterval(" for that time period. Duplicates are not ", range0, meterPlot0.DEFAULT_OUTLINE_PAINT, (Stroke) null, meterPlot0.DEFAULT_OUTLINE_PAINT);
      meterPlot0.drawArcForInterval(graphics2D0, rectangle2D_Double0, meterInterval0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Range range0 = new Range(1.0F, 1.0F);
      MeterInterval meterInterval0 = new MeterInterval("Should never get to here!", range0, meterPlot0.DEFAULT_OUTLINE_PAINT, meterPlot0.DEFAULT_OUTLINE_STROKE, meterPlot0.DEFAULT_BACKGROUND_PAINT);
      meterPlot0.drawArcForInterval(graphics2D0, rectangle2D_Double0, meterInterval0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(80.0);
      meterPlot0.setDataset(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(270, 10);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setMeterAngle(3);
      DialShape dialShape0 = DialShape.CHORD;
      meterPlot0.setDialShape(dialShape0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(3, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setMeterAngle(3);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(3, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setDataset(defaultValueDataset0);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Paint paint0 = spiderWebPlot0.getLabelPaint();
      meterPlot0.setTickLabelPaint(paint0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = Font.decode("");
      meterPlot0.setTickLabelFont(font0);
      MeterPlot meterPlot1 = new MeterPlot();
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertFalse(boolean0);
      assertEquals("Units", meterPlot1.getUnits());
      assertTrue(meterPlot1.getTickLabelsVisible());
      assertTrue(meterPlot1.isValueVisible());
      assertEquals(270, meterPlot1.getMeterAngle());
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setTickLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(10, 270);
      assertFalse(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(true);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isValueVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize((-1952257861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setTickSize(1844.32003);
      MeterPlot meterPlot1 = new MeterPlot();
      boolean boolean0 = meterPlot1.equals(meterPlot0);
      assertEquals(1844.32003, meterPlot0.getTickSize(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category> defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset<Locale.Category, Locale.Category>();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle(436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (436)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle((-666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (-666)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDrawBorder();
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      boolean boolean0 = meterPlot0.isValueVisible();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      boolean boolean0 = meterPlot0.getTickLabelsVisible();
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(boolean0);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getDialShape();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getIntervals();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Font font0 = meterPlot0.getValueFont();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(12, font0.getSize());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getTickLabelFont();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10, font0.getSize());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setValueFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isValueVisible());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialOutlinePaint();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isValueVisible());
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.zoom(3949.348554);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      String string0 = meterPlot0.getUnits();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", string0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertTrue(meterPlot0.isValueVisible());
      
      meterPlot0.setValueVisible(false);
      boolean boolean0 = meterPlot0.isValueVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getTickLabelPaint();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getDialBackgroundPaint();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getNeedlePaint();
      assertTrue(meterPlot0.isValueVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals((-16711936), color0.getRGB());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.clearIntervals();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = meterPlot0.getRange();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(50.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      double double0 = meterPlot0.getTickSize();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, double0, 0.01);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.addInterval((MeterInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'interval' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getTickPaint();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      meterPlot0.setTickLabelFormat(numberFormat0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      int int0 = meterPlot0.getMeterAngle();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, int0);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getValuePaint();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.isValueVisible());
      assertEquals((-256), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setDrawBorder(true);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      jFreeChart0.createBufferedImage(270, 10);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getPlotType();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isValueVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }
}
