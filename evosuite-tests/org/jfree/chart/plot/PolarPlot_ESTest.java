/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 04 01:48:52 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.text.NumberFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import javax.swing.JScrollPane;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartElementVisitor;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.api.LengthAdjustmentType;
import org.jfree.chart.api.RectangleAnchor;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.NumberTickUnitSource;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.StandardTickUnitSource;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.axis.ValueTick;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.legend.LegendItemCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarAxisLocation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PolarPlot_ESTest extends PolarPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom(0.0F);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TaskSeriesCollection<Integer, Integer> taskSeriesCollection0 = new TaskSeriesCollection<Integer, Integer>();
      List<Integer> list0 = taskSeriesCollection0.getColumnKeys();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleOffset(0.0);
      polarPlot0.refreshAngleTicks();
      assertEquals(0.0, polarPlot0.getAngleOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit((-1432.0));
      polarPlot0.setAngleTickUnit(tickUnit0);
      polarPlot0.refreshAngleTicks();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.rendererChanged((RendererChangeEvent) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Point point0 = new Point();
      Dimension dimension0 = new Dimension(2135588691, (-88));
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
      PlotState plotState0 = new PlotState();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      polarPlot0.draw((Graphics2D) null, rectangle2D0, point0, plotState0, plotRenderingInfo0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(2.0F, 3157.741F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      polarPlot0.render(graphics2D0, rectangle2D0, plotRenderingInfo0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      LogAxis logAxis0 = new LogAxis("");
      Point point0 = polarPlot0.translateToJava2D(0.05, 10, logAxis0, rectangle0);
      assertEquals(0, point0.x);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      NumberAxis numberAxis0 = new NumberAxis();
      Point point0 = polarPlot0.translateToJava2D(2.0F, 500, numberAxis0, rectangle2D_Float0);
      assertEquals((-349), point0.x);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(9994, point0.y);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setCounterClockwise(true);
      boolean boolean0 = polarPlot0.isCounterClockwise();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PolarItemRenderer polarItemRenderer0 = polarPlot0.getRenderer();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertNotNull(polarItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Bd4(e-\"EHl/");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      polarPlot0.setFixedLegendItems(legendItemCollection0);
      polarPlot0.getFixedLegendItems();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(90.0, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      MatrixSeriesCollection<Integer> matrixSeriesCollection0 = new MatrixSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(matrixSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      XYDataset xYDataset0 = polarPlot0.getDataset();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertNotNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisLocation((-2480));
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(PolarAxisLocation.EAST_ABOVE, polarPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(137.6, "");
      polarPlot0.setAxis(91, (ValueAxis) cyclicNumberAxis0, true);
      int int0 = polarPlot0.getAxisIndex(cyclicNumberAxis0);
      assertEquals(0.04999999999998295, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 10);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxisForDataset(500);
      assertNotNull(valueAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.18, 0.18);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxisForDataset(500);
      assertNotNull(valueAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultTableXYDataset<ChronoLocalDate> defaultTableXYDataset0 = new DefaultTableXYDataset<ChronoLocalDate>();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, valueAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis1 = polarPlot0.getAxisForDataset(128);
      assertNotNull(valueAxis1);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      polarPlot0.setAxis((-2099761789), (ValueAxis) symbolAxis0);
      assertEquals(3.5, symbolAxis0.getUpperBound(), 0.01);
      
      polarPlot0.getAxis((-2099761789));
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("EqOdmd]U");
      periodAxis0.setLabelAngle(45.0);
      polarPlot0.setAxis((-70), (ValueAxis) periodAxis0);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      
      polarPlot0.getAxis((-70));
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertNotNull(valueAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(137.6, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom(1.0F);
      polarPlot0.getAxis();
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-1547.04), "Polar Plot");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertNotNull(valueAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-92.39485124400017), (-92.39485124400017), "cLpx=f>:5WXlW");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertNotNull(valueAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(45.0, numberFormat0, 500);
      polarPlot0.setAngleTickUnit(numberTickUnit0);
      polarPlot0.getAngleTickUnit();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleOffset(0.0);
      double double0 = polarPlot0.getAngleOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleOffset(0.5F);
      double double0 = polarPlot0.getAngleOffset();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_BELOW;
      JFreeChart jFreeChart0 = new JFreeChart("Y", numberAxis0.DEFAULT_AXIS_LABEL_FONT, polarPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = line2D_Float0.getBounds();
      AxisState axisState0 = polarPlot0.drawAxis(numberAxis0, polarAxisLocation0, graphics2D0, rectangle0);
      assertEquals(15.640625, axisState0.getCursor(), 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_LEFT;
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_TICK_LABEL_FONT, polarPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 2134.755538396748, 0.05, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AxisState axisState0 = polarPlot0.drawAxis(numberAxis0, polarAxisLocation0, graphics2D0, defaultCaret0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals((-14.0), axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setCounterClockwise(true);
      polarPlot0.calculateTextAnchor(157.40502090758605);
      assertTrue(polarPlot0.isCounterClockwise());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TextAnchor textAnchor0 = polarPlot0.calculateTextAnchor(0.05);
      assertEquals(TextAnchor.BOTTOM_LEFT, textAnchor0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      LinkedList<ValueTick> linkedList0 = new LinkedList<ValueTick>();
      polarPlot0.buildRadialTicks(linkedList0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(2.0, (PlotRenderingInfo) null, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        polarPlot0.translateToJava2D(2.0F, 0.0F, (ValueAxis) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        polarPlot0.setAxis((-1), (ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.setAngleTickUnit((TickUnit) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.setAngleLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.setAngleLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleOffset(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      polarPlot0.refreshAngleTicks();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxis((-2034384804), (-2034384804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset<Integer, Integer> slidingCategoryDataset0 = new SlidingCategoryDataset<Integer, Integer>(defaultIntervalCategoryDataset0, 280, 10);
      List<Integer> list0 = slidingCategoryDataset0.getRowKeys();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(1177, list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.getIndexOf((PolarItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'renderer' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.getDataRange((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.buildRadialTicks((List<ValueTick>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.addCornerTextItem((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("C2@E2-nj<qJpZ");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      double[] doubleArray0 = new double[6];
      histogramDataset0.addSeries((Comparable) true, doubleArray0, 500);
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(histogramDataset0, logarithmicAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[11];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(10, oHLCDataItemArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(487.92, 243.4919101999999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(defaultOHLCDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VectorSeriesCollection<Integer> vectorSeriesCollection0 = new VectorSeriesCollection<Integer>();
      ModuloAxis moduloAxis0 = new ModuloAxis("^UvmMxm(", (Range) null);
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(vectorSeriesCollection0, moduloAxis0, (PolarItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Date[] dateArray0 = new Date[4];
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(1.0E-8, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(defaultHighLowDataset0, numberAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      boolean boolean0 = polarPlot0.equals(polarPlot0);
      assertTrue(boolean0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("VHq%4=dW", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(jFreeChart0, (Dataset) null);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-92.39485124400017), (-92.39485124400017), "cLpx=f>:5WXlW");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, cyclicNumberAxis0, defaultPolarItemRenderer0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultPolarItemRenderer0, (Dataset) null);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataRange(cyclicNumberAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataRange(logAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      polarPlot0.getDataRange(numberAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.zoom(10);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VectorSeriesCollection<LengthAdjustmentType> vectorSeriesCollection0 = new VectorSeriesCollection<LengthAdjustmentType>();
      LogAxis logAxis0 = new LogAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      int int0 = polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      int int0 = polarPlot0.getAxisIndex(cyclicNumberAxis0);
      assertEquals(0, int0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Polar Plot");
      int int0 = polarPlot0.getAxisIndex(logarithmicAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.getAxisIndex((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setRenderer(10, (PolarItemRenderer) null, false);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(137.6, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setRenderer(0, (PolarItemRenderer) defaultPolarItemRenderer0, true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(137.6, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setDataset(0, (XYDataset) timeTableXYDataset0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1, polarPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_LEFT;
      polarPlot0.setAxisLocation(26, polarAxisLocation0, false);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      polarPlot0.setAxisLocation(4, polarAxisLocation0, true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer(1949);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getDataset(500);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getAngleGridlineStroke();
      assertEquals(0, basicStroke0.getEndCap());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisCount();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isAngleGridlinesVisible();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation(6);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(PolarAxisLocation.WEST_ABOVE, polarAxisLocation0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Color color0 = (Color)polarPlot0.getAngleGridlinePaint();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(128, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Font font0 = polarPlot0.getAngleLabelFont();
      assertEquals(12, font0.getSize());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxis((-70));
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer(10, (PolarItemRenderer) defaultPolarItemRenderer0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.isRadiusMinorGridlinesVisible();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.PolarPlt");
      Rectangle rectangle0 = new Rectangle(10, 10);
      Point point0 = polarPlot0.translateToJava2D(4.0, 1.0F, periodAxis0, rectangle0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(Integer.MIN_VALUE, point0.y);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(137.6, "");
      Rectangle rectangle0 = new Rectangle();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Point2D point2D0 = rectangleAnchor0.getAnchorPoint(rectangle0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      polarPlot0.zoomRangeAxes(2040.444462817, plotRenderingInfo0, point2D0, false);
      assertEquals(1071.7583429789252, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      polarPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0, false);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      Point2D.Double point2D_Double0 = new Point2D.Double((-2866.107704), (-2866.107704));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      NumberAxis numberAxis0 = new NumberAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultIntervalXYDataset0, numberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoomRangeAxes((double) defaultPolarItemRenderer0.ZERO, plotRenderingInfo0, (Point2D) point2D_Double0, true);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1241.7218), "org.jfree.chart.plot.PolarPlot");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      SimpleHistogramDataset<Integer> simpleHistogramDataset0 = new SimpleHistogramDataset<Integer>((Integer) polarPlot0.MINIMUM_HEIGHT_TO_DRAW);
      PolarPlot polarPlot1 = new PolarPlot(simpleHistogramDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PolarPlot polarPlot2 = (PolarPlot)polarPlot1.clone();
      assertTrue(polarPlot2.isAngleLabelsVisible());
      assertEquals(1, polarPlot2.getAxisCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      polarPlot1.setAngleGridlinesVisible(false);
      boolean boolean0 = polarPlot0.equals(polarPlot1);
      assertFalse(polarPlot1.isAngleGridlinesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarPlot polarPlot1 = new PolarPlot();
      assertTrue(polarPlot1.equals((Object)polarPlot0));
      
      NumberTickUnitSource numberTickUnitSource0 = new NumberTickUnitSource();
      TickUnit tickUnit0 = numberTickUnitSource0.getCeilingTickUnit((double) 2.0F);
      polarPlot1.setAngleTickUnit(tickUnit0);
      boolean boolean0 = polarPlot0.equals(polarPlot1);
      assertFalse(polarPlot1.equals((Object)polarPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-287.48514), (String) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, cyclicNumberAxis0.DEFAULT_RANGE);
      PolarPlot polarPlot1 = new PolarPlot(defaultIntervalXYDataset0, moduloAxis0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.equals(polarPlot1);
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarPlot polarPlot1 = new PolarPlot();
      boolean boolean0 = polarPlot1.equals(polarPlot0);
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      boolean boolean0 = polarPlot0.equals(polarPlot0.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      NumberAxis numberAxis0 = new NumberAxis();
      PolarPlot polarPlot0 = new PolarPlot(defaultIntervalXYDataset0, numberAxis0, (PolarItemRenderer) null);
      LegendItemCollection legendItemCollection0 = polarPlot0.getLegendItems();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom((-90.0));
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(7.0, 10);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom(1.0E-8);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0E-8, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      List<ValueTick> list0 = polarPlot0.refreshAngleTicks();
      polarPlot0.setRadiusMinorGridlinesVisible(false);
      polarPlot0.buildRadialTicks(list0);
      assertFalse(polarPlot0.isRadiusMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      polarPlot0.setDataset((XYDataset) defaultIntervalXYDataset0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRenderer((PolarItemRenderer) defaultPolarItemRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        polarPlot0.render((Graphics2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-90.0));
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.WEST_ABOVE;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis(cyclicNumberAxis0, polarAxisLocation0, (Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CategoryPlot<Integer, Integer> categoryPlot0 = new CategoryPlot<Integer, Integer>();
      float[] floatArray0 = new float[2];
      JFreeChart jFreeChart0 = new JFreeChart("Polar Plot", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 420, 10);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_BELOW;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis((ValueAxis) null, polarAxisLocation0, (Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CategoryPlot<Integer, Integer> categoryPlot0 = new CategoryPlot<Integer, Integer>();
      JFreeChart jFreeChart0 = new JFreeChart("Polar Plot", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.5F, 1.0F, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 420, 10);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_ABOVE;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis((ValueAxis) null, polarAxisLocation0, (Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      NumberAxis numberAxis0 = new NumberAxis();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_LEFT;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis(numberAxis0, polarAxisLocation0, (Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 45.0);
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis(cyclicNumberAxis0, polarAxisLocation0, (Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" (", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      float[] floatArray0 = new float[3];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 420, 10);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_RIGHT;
      // Undeclared exception!
      try { 
        polarPlot0.drawAxis((ValueAxis) null, polarAxisLocation0, graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("p9k{d0s.`r5U/o_");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" (", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, polarPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      float[] floatArray0 = new float[3];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 420, 10);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      polarPlot0.drawCornerTextItems(graphics2D0, rectangle2D0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2501, 2501);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(23, 1493, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      int int0 = polarPlot0.getIndexOf(defaultPolarItemRenderer0);
      assertEquals((-1), int0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxisForDataset(880);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      List<Integer> list0 = List.of((Integer) 10, (Integer) polarPlot0.MINIMUM_HEIGHT_TO_DRAW, (Integer) polarPlot0.MINIMUM_HEIGHT_TO_DRAW, (Integer) 10, (Integer) 10, (Integer) polarPlot0.MINIMUM_HEIGHT_TO_DRAW);
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(3608, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be unique.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes(999, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultStatisticalCategoryDataset<Integer, Integer> defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset<Integer, Integer>();
      List<Integer> list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      // Undeclared exception!
      try { 
        polarPlot0.mapDatasetToAxes((-2137981507), list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TextAnchor textAnchor0 = polarPlot0.calculateTextAnchor((-3644.046));
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(TextAnchor.CENTER, textAnchor0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.clearCornerTextItems();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.removeCornerTextItem("o");
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setRadiusGridlinesVisible(false);
      boolean boolean0 = polarPlot0.isRadiusGridlinesVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setRadiusGridlinesVisible(true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleGridlinesVisible(false);
      boolean boolean0 = polarPlot0.isAngleGridlinesVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleGridlinesVisible(true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      
      polarPlot0.setAngleLabelsVisible(false);
      assertFalse(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleLabelsVisible(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = polarPlot0.indexOf((XYDataset) null);
      assertEquals(0, int0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>();
      int int0 = polarPlot0.indexOf(timeSeriesCollection0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.setDataset(10, (XYDataset) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      polarPlot0.setDataset((XYDataset) defaultIntervalXYDataset0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        polarPlot0.render((Graphics2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      polarPlot0.setAxis(1, (ValueAxis) null, false);
      assertEquals(2, polarPlot0.getAxisCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      boolean boolean0 = polarPlot0.isRangeZoomable();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Color color0 = (Color)polarPlot0.getAngleLabelPaint();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      polarPlot0.zoomDomainAxes(1860.709403447, (double) defaultPolarItemRenderer0.ZERO, plotRenderingInfo0, (Point2D) point0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("7tKgG56u'WD}x~a>|v)");
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleLabelPaint(polarPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(1046.07450932, 1170.1272904382);
      polarPlot0.zoomRangeAxes((-1963.6), (PlotRenderingInfo) null, (Point2D) point2D_Double0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.NORTH_RIGHT;
      polarPlot0.setAxisLocation((-1445), polarAxisLocation0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getOrientation();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      polarPlot0.zoomDomainAxes((double) 392993472, plotRenderingInfo0, (Point2D) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      polarPlot0.setRadiusGridlinePaint(systemColor0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isCounterClockwise();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DateAxis dateAxis0 = new DateAxis();
      polarPlot0.setAxis((ValueAxis) dateAxis0);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis numberAxis0 = new NumberAxis();
      PolarPlot polarPlot0 = new PolarPlot(defaultIntervalXYDataset0, numberAxis0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.isAngleLabelsVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][4][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.isDomainZoomable();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.isRadiusGridlinesVisible();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      polarPlot0.setAngleLabelFont(font0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      List<ValueTick> list0 = polarPlot0.refreshAngleTicks();
      List<ValueTick> list1 = polarPlot0.buildRadialTicks(list0);
      assertEquals(8, list1.size());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.SOUTH_RIGHT;
      polarPlot0.setAxisLocation(polarAxisLocation0);
      assertEquals(PolarAxisLocation.SOUTH_RIGHT, polarPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      polarPlot0.setFixedLegendItems(legendItemCollection0);
      LegendItemCollection legendItemCollection1 = polarPlot0.getLegendItems();
      assertSame(legendItemCollection1, legendItemCollection0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      polarPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) null, true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = polarPlot0.getMargin();
      assertEquals(20, int0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxis();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ChartElementVisitor chartElementVisitor0 = mock(ChartElementVisitor.class, new ViolatedAssumptionAnswer());
      polarPlot0.receive(chartElementVisitor0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getFixedLegendItems();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      polarPlot0.setRadiusGridlineStroke(defaultPolarItemRenderer0.DEFAULT_STROKE);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      double double0 = polarPlot0.getAngleOffset();
      assertEquals((-90.0), double0, 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = polarPlot0.getAxisLocation();
      assertEquals(PolarAxisLocation.EAST_ABOVE, polarAxisLocation0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      XIntervalSeriesCollection<Integer> xIntervalSeriesCollection0 = new XIntervalSeriesCollection<Integer>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultPolarItemRenderer0.ZERO, 10, "");
      PolarPlot polarPlot0 = new PolarPlot(xIntervalSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-90.0), 45.0, 1.0E-8, 0.05);
      Stack<ValueTick> stack0 = new Stack<ValueTick>();
      // Undeclared exception!
      try { 
        polarPlot0.drawGridlines((Graphics2D) null, rectangle2D_Double0, stack0, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.DefaultPolarItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Color color0 = (Color)polarPlot0.getRadiusGridlinePaint();
      assertEquals(128, color0.getRed());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setMargin(1994091958);
      assertEquals(1994091958, polarPlot0.getMargin());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getDataset();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-90.0), 45.0, 1.0E-8, 0.05);
      Stack<ValueTick> stack0 = new Stack<ValueTick>();
      polarPlot0.drawGridlines((Graphics2D) null, rectangle2D_Double0, stack0, stack0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.mapDatasetToAxis(10, 10);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      polarPlot0.zoomRangeAxes(315.0, 315.0, plotRenderingInfo0, (Point2D) point0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      TickUnit tickUnit0 = polarPlot0.getAngleTickUnit();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(45.0, tickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getRadiusGridlineStroke();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Color color0 = (Color)CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
      polarPlot0.setAngleGridlinePaint(color0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleGridlineStroke((Stroke) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setCounterClockwise(true);
      List<ValueTick> list0 = polarPlot0.refreshAngleTicks();
      assertEquals(8, list0.size());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getDatasetCount();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("p9k{d0s.`r5U/o_");
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAxis(500, (ValueAxis) periodAxis0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(387.4714);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      polarPlot0.setAxis(500, valueAxis0, true);
      assertEquals(2, polarPlot0.getAxisCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1241.7218), "org.jfree.chart.plot.PolarPlot");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      SimpleHistogramDataset<Integer> simpleHistogramDataset0 = new SimpleHistogramDataset<Integer>((Integer) polarPlot0.MINIMUM_WIDTH_TO_DRAW);
      PolarPlot polarPlot1 = new PolarPlot(simpleHistogramDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      LegendItemCollection legendItemCollection0 = polarPlot1.getLegendItems();
      assertEquals(1, legendItemCollection0.getItemCount());
      assertTrue(polarPlot1.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getPlotType();
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarAxisLocation polarAxisLocation0 = PolarAxisLocation.EAST_BELOW;
      polarPlot0.setAxisLocation(polarAxisLocation0, false);
      assertEquals(PolarAxisLocation.EAST_BELOW, polarPlot0.getAxisLocation());
  }
}
