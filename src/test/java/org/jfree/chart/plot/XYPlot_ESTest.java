/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 04 00:24:37 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.table.JTableHeader;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.api.Layer;
import org.jfree.chart.api.RectangleEdge;
import org.jfree.chart.api.RectangleInsets;
import org.jfree.chart.api.UnitType;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.axis.ValueTick;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.legend.LegendItemCollection;
import org.jfree.chart.legend.LegendTitle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CenterTextMode;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBezierRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.ShadowGenerator;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":N*");
      AffineTransform affineTransform0 = new AffineTransform();
      Point point0 = new Point(10, 10);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      affineTransform0.transform((Point2D) point0, (Point2D) point2D_Double0);
      combinedRangeXYPlot0.hashCode();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getQuadrantPaint(3);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1924.39183));
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setRangeAxisLocation((-2), axisLocation0, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("Invalid index.", range0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      List<Integer> list0 = List.of((Integer) 10, (Integer) thermometerPlot0.UNITS_FAHRENHEIT, (Integer) moduloAxis0.MAXIMUM_TICK_COUNT);
      combinedDomainXYPlot0.mapDatasetToDomainAxes(2089, list0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      combinedDomainXYPlot0.drawZeroDomainBaseline((Graphics2D) null, rectangle2D0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-823062033), 1.0F, (String) null);
      CombinedDomainXYPlot<CenterTextMode> combinedDomainXYPlot0 = new CombinedDomainXYPlot<CenterTextMode>(cyclicNumberAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot1.setRangeZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Stroke stroke0 = combinedDomainCategoryPlot0.getRangeZeroBaselineStroke();
      combinedRangeXYPlot0.setRangeGridlineStroke(stroke0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(logAxis0);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.0F, 0.05, 72.0, 3308.5157749, 72.0, 1078.620872548665);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 0.91, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot<Character> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Character>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-823062033), 1.0F, (String) null);
      CombinedRangeXYPlot<ItemLabelAnchor> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ItemLabelAnchor>(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      CombinedDomainXYPlot<CenterTextMode> combinedDomainXYPlot1 = new CombinedDomainXYPlot<CenterTextMode>(cyclicNumberAxis0);
      combinedDomainXYPlot1.addDomainMarker((Marker) intervalMarker0);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      
      xYPlot0.setRangeCrosshairLockedOnData(false);
      boolean boolean0 = xYPlot0.isRangeCrosshairLockedOnData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultTableXYDataset<CenterTextMode> defaultTableXYDataset0 = new DefaultTableXYDataset<CenterTextMode>();
      NumberAxis numberAxis0 = new NumberAxis("");
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500, customXYToolTipGenerator0, timeSeriesURLGenerator0);
      XYPlot<CenterTextMode> xYPlot0 = new XYPlot<CenterTextMode>(defaultTableXYDataset0, numberAxis0, numberAxis0, cyclicXYItemRenderer0);
      xYPlot0.getRendererCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6177.704246952433, "]");
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYErrorRenderer0);
      XYErrorRenderer xYErrorRenderer1 = (XYErrorRenderer)xYPlot0.getRenderer();
      assertTrue(xYErrorRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      Paint paint0 = waferMapRenderer0.getDefaultOutlinePaint();
      combinedDomainXYPlot0.setRangeTickBandPaint(paint0);
      Color color0 = (Color)combinedDomainXYPlot0.getRangeTickBandPaint();
      assertEquals((-8355712), color0.getRGB());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRangeAxisLocation();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(logAxis0);
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxisForDataset(3210);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      combinedRangeXYPlot0.zoomRangeAxes((-1782.51258474), 454.1985608876392, plotRenderingInfo0, (Point2D) point0);
      combinedRangeXYPlot0.getRangeAxis(0);
      assertEquals(476.90848893202116, numberAxis0.getUpperBound(), 0.01);
      assertEquals((-1871.638213977), numberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.resizeRange(53.90633528657, (-3538.036906644252));
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, logAxis0, logAxis0, (XYItemRenderer) null);
      xYPlot0.getRangeAxis();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      LogAxis logAxis0 = new LogAxis();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, logAxis0, logAxis0, (XYItemRenderer) null);
      xYPlot0.getRangeAxis();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultBoxAndWhiskerXYDataset<Integer> defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset<Integer>(integer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0));
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4497, boxAndWhiskerXYToolTipGenerator0, (XYURLGenerator) null);
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, standardXYItemRenderer0);
      xYPlot0.getRangeAxis();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getOrientation();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultBoxAndWhiskerXYDataset<Integer> defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset<Integer>(integer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0));
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, (ValueAxis) null, standardXYItemRenderer0);
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertEquals(1, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedDomainXYPlot0.setRenderer(498, (XYItemRenderer) clusteredXYBarRenderer0, false);
      int int0 = combinedDomainXYPlot0.getIndexOf(clusteredXYBarRenderer0);
      assertEquals(498, int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getFixedLegendItems();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6177.704246952433, "]");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(17, "CMZ-0;~(BV<m%ChQb");
      TimeSeriesCollection<Integer> timeSeriesCollection0 = new TimeSeriesCollection<Integer>(simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0F, true, boxAndWhiskerXYToolTipGenerator0);
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(timeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      ValueAxis valueAxis1 = xYPlot0.getDomainAxisForDataset(25);
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(valueAxis1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500);
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(timeTableXYDataset0, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      xYPlot0.getDomainAxisForDataset(500);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, (-691.66774));
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(cyclicNumberAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(500);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(valueAxis0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-823062028), 1.0F, (String) null);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>((XYDataset<Integer>) null, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      ValueAxis valueAxis0 = xYPlot0.getDomainAxisForDataset(121);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.getDomainAxisEdge();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.getDomainAxisCount();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("1zHt{I{c mG9:Uy<unt");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(valueAxis0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.getDomainAxis();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      logAxis0.setRangeWithMargins((double) 0, 3075.9637851174);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(valueAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>((XYDataset<Integer>) null, cyclicNumberAxis0, numberAxis0, standardXYItemRenderer0);
      ValueAxis valueAxis0 = xYPlot0.getDomainAxis();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultBoxAndWhiskerXYDataset<Integer> defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset<Integer>(integer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0));
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, (ValueAxis) null, standardXYItemRenderer0);
      xYPlot0.getDomainAxis();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      XYSeriesCollection<Integer> xYSeriesCollection0 = new XYSeriesCollection<Integer>();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYSeriesCollection0, numberAxis0, numberAxis0, xYDifferenceRenderer0);
      xYPlot0.getDatasetCount();
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYPlot<RectangleEdge> xYPlot0 = new XYPlot<RectangleEdge>();
      xYPlot0.getDataset();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      BufferedImage bufferedImage0 = new BufferedImage(10, 15, 10);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      axisSpace0.setTop(1);
      AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
      assertEquals(1.0, axisSpace1.getTop(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      BufferedImage bufferedImage0 = new BufferedImage(10, 15, 10);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertSame(axisSpace1, axisSpace0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("1zHt{I{c mG9:Uy<unt");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(36.640625, axisSpace1.getBottom(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      BufferedImage bufferedImage0 = new BufferedImage(10, 15, 10);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, 745.04205F);
      DateAxis dateAxis0 = new DateAxis("CxK5#");
      CombinedRangeXYPlot<ItemLabelAnchor> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ItemLabelAnchor>(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(2.0, plotRenderingInfo0, (Point2D) point2D_Float0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: [Dec 2, 292269055, 4:47:04 PM --> Dec 2, 292269055, 4:47:04 PM]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 0.0F, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((-1983.49605), 2160.6698181, (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((-3052.2819518617), plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Point2D.Float point2D_Float0 = new Point2D.Float(2.0F, 500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) point2D_Float0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: [Dec 2, 292269055, 4:47:04 PM --> Dec 2, 292269055, 4:47:04 PM]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(764.966240218638, (double) 10, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedRangeXYPlot<CenterTextMode> combinedRangeXYPlot0 = new CombinedRangeXYPlot<CenterTextMode>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYPlot<CenterTextMode> xYPlot0 = new XYPlot<CenterTextMode>();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-3506), (ValueAxis) moduloAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(0, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(10, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.panDomainAxes((-861.15), (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot<CenterTextMode> combinedRangeXYPlot0 = new CombinedRangeXYPlot<CenterTextMode>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxis((-2331), (-2331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'index' (-2331) to be non-negative.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick(2, (-4551), (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'index' (-303) to be non-negative.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-1226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'index' (-1226) to be non-negative.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      TaskSeriesCollection<Integer, Integer> taskSeriesCollection0 = new TaskSeriesCollection<Integer, Integer>();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYTaskDataset0, numberAxis0, numberAxis0, xYAreaRenderer0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.95F, 2794L, 4.0F, 2065.0F);
      // Undeclared exception!
      try { 
        xYPlot0.drawAxes((Graphics2D) null, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.datasetChanged((DatasetChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedDomainXYPlot<ChronoLocalDate> combinedDomainXYPlot0 = new CombinedDomainXYPlot<ChronoLocalDate>();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 500);
      XYPlot<Integer> xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot<Integer>(dynamicTimeSeriesCollection0, dateAxis0, dateAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TaskSeriesCollection<Integer, Integer> taskSeriesCollection0 = new TaskSeriesCollection<Integer, Integer>();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(xYTaskDataset0, (-2942.936489262574));
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-2942.936489262574), false);
      ModuloAxis moduloAxis0 = new ModuloAxis("X!8D6YyaYPS&)P(,", (Range) null);
      XYPlot<Integer> xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot<Integer>(xYBarDataset0, moduloAxis0, moduloAxis0, clusteredXYBarRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      PeriodAxis periodAxis0 = new PeriodAxis("O[i)/0~0202");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500);
      XYPlot<Integer> xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot<Integer>(defaultIntervalXYDataset0, periodAxis0, numberAxis0, stackedXYAreaRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to class org.jfree.data.xy.TableXYDataset (org.jfree.data.xy.DefaultIntervalXYDataset and org.jfree.data.xy.TableXYDataset are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3ac2641)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(3454.039467);
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = dateAxis0.DEFAULT_ANCHOR_DATE;
      MockDate mockDate0 = new MockDate(10, 10, 10, 1299, 500);
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[3] = dateAxis0.DEFAULT_ANCHOR_DATE;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(10, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      XYPlot<CenterTextMode> xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot<CenterTextMode>(defaultHighLowDataset0, dateAxis0, dateAxis0, candlestickRenderer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float(2.0F, 0.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3796.7327804009124, 3796.7327804009124);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedDomainXYPlot<Character> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Character>();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 825.058);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(4.0, true);
      assertEquals(4.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setDomainCrosshairValue((-52.0), false);
      assertEquals((-52.0), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeXYPlot<CenterTextMode> combinedRangeXYPlot0 = new CombinedRangeXYPlot<CenterTextMode>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      DefaultKeyedValues2DDataset<Integer, Integer> defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset<Integer, Integer>();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot1, defaultKeyedValues2DDataset0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      xYPlot0.getDataRange(valueAxis0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYIntervalSeriesCollection<ChronoLocalDate> xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection<ChronoLocalDate>();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateAxis0.DEFAULT_RANGE);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("org.jfree.chart.plot.SeriesRenderingOrder");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(87, standardXYZToolTipGenerator0, standardXYURLGenerator0);
      XYPlot<ChronoLocalDate> xYPlot0 = new XYPlot<ChronoLocalDate>(xYIntervalSeriesCollection0, dateAxis0, moduloAxis0, cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      int int0 = combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals((-1), int0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      int int0 = combinedRangeXYPlot0.getRangeAxisIndex(dateAxis0);
      assertEquals(0, int0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      NumberAxis numberAxis0 = new NumberAxis(" 0=TXc-");
      int int0 = combinedDomainXYPlot0.getDomainAxisIndex(numberAxis0);
      assertEquals((-1), int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(cyclicNumberAxis0);
      int int0 = combinedDomainXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "GHK2G)dmRjMaB");
      Locale locale0 = Locale.CHINA;
      DateAxis dateAxis0 = new DateAxis("]?MYY^}Qi23Q,N", simpleTimeZone0, locale0);
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultWindDataset0, dateAxis0, dateAxis0, xYBezierRenderer0);
      xYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>((XYDataset<Integer>) null, numberAxis0, numberAxis0, xYBezierRenderer0);
      xYPlot0.setDataset((-1902), (XYDataset<Integer>) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(1, layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(1069, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot<Character> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Character>();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(10, layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":N*");
      CombinedDomainXYPlot<CenterTextMode> combinedDomainXYPlot0 = new CombinedDomainXYPlot<CenterTextMode>(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-295), layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxisForDataset(0);
      assertNotNull(valueAxis0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRangeAxisForDataset(1040533314);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("kYSHvcZx\u0005`#");
      CombinedDomainXYPlot<Locale.Category> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Locale.Category>(numberAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":N*");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      ArrayList<ValueTick> arrayList0 = new ArrayList<ValueTick>();
      combinedRangeXYPlot0.drawRangeTickBands(graphics2D0, rectangle0, arrayList0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0E-8, 10, 1.0F, 1.0F);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, 0.99, 0.05, 0.05, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      LogAxis logAxis0 = new LogAxis();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, logAxis0, logAxis0, (XYItemRenderer) null);
      ValueMarker valueMarker0 = new ValueMarker(1.0, xYPlot0.DEFAULT_GRIDLINE_PAINT, logAxis0.DEFAULT_AXIS_LINE_STROKE, logAxis0.DEFAULT_TICK_MARK_PAINT, logAxis0.DEFAULT_TICK_MARK_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = xYPlot0.removeRangeMarker(100, (Marker) valueMarker0, layer0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(1540, (Marker) categoryMarker0, layer0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(52, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(804, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(logarithmicAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(7, (Marker) intervalMarker0, layer0, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      MatrixSeriesCollection<Integer> matrixSeriesCollection0 = new MatrixSeriesCollection<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(matrixSeriesCollection0, dateAxis0, dateAxis0, xYSplineRenderer0);
      xYPlot0.getRendererForDataset(matrixSeriesCollection0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(32, 32);
      LogAxis logAxis0 = new LogAxis("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(logAxis0.DEFAULT_TICK_MARK_PAINT, logAxis0.DEFAULT_TICK_LABEL_PAINT, false);
      XYPlot<ChronoLocalDate> xYPlot0 = new XYPlot<ChronoLocalDate>(dynamicTimeSeriesCollection0, logAxis0, logAxis0, xYDifferenceRenderer0);
      LegendItemCollection legendItemCollection0 = xYDifferenceRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) vectorRenderer0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRenderer((-145), (XYItemRenderer) null, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(timeTableXYDataset0, 1.7976931348623157E308);
      XYBarDataset<Integer> xYBarDataset1 = new XYBarDataset<Integer>(xYBarDataset0, 2081.5326);
      XYDataset<Integer> xYDataset0 = xYBarDataset1.getUnderlyingDataset();
      DateAxis dateAxis0 = new DateAxis("({D_Y-");
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYBarDataset0, dateAxis0, dateAxis0, xYBezierRenderer0);
      xYPlot0.indexOf(xYDataset0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(timeTableXYDataset0, 1.7976931348623157E308);
      DateAxis dateAxis0 = new DateAxis("A!I4sn_U=");
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(timeTableXYDataset0, dateAxis0, dateAxis0, xYBezierRenderer0);
      int int0 = xYPlot0.indexOf(xYBarDataset0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(defaultIntervalXYDataset0, 0.05);
      PeriodAxis periodAxis0 = new PeriodAxis(">s");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYBarDataset0, periodAxis0, periodAxis0, xYLineAndShapeRenderer0);
      xYPlot0.setDataset(0, (XYDataset<Integer>) defaultIntervalXYDataset0);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      assertEquals(AxisLocation.TOP_OR_RIGHT, combinedDomainXYPlot0.getRangeAxisLocation());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":N*");
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeAxis(41, (ValueAxis) numberAxis0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) null, true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      combinedRangeXYPlot0.getRangeAxis(0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6177.704246952433, "]");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation0, true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(500, axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      combinedDomainXYPlot0.getDomainAxisLocation(888);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[20];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(20, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1024, 3522);
      NumberAxis numberAxis0 = new NumberAxis();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot<Character> xYPlot0 = new XYPlot<Character>(dynamicTimeSeriesCollection0, numberAxis0, numberAxis0, candlestickRenderer0);
      MockDate mockDate0 = new MockDate(10, 10, 0, 1, (-1140));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      Hour hour0 = new Hour(mockDate0, timeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("", hour0, hour0);
      xYPlot0.setDomainAxis(0, (ValueAxis) periodAxis0, true);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      combinedRangeXYPlot0.getDomainAxis(1214);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedDomainXYPlot<RectangleEdge> combinedDomainXYPlot0 = new CombinedDomainXYPlot<RectangleEdge>();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      combinedDomainXYPlot0.setRenderer(1809, (XYItemRenderer) xYBubbleRenderer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 500);
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(dynamicTimeSeriesCollection0, dateAxis0, dateAxis0, xYSplineRenderer0);
      XYDataset<Integer> xYDataset0 = xYPlot0.getDataset();
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(21, "");
      Locale locale0 = Locale.CHINA;
      DateAxis dateAxis0 = new DateAxis((String) null, simpleTimeZone0, locale0);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(865, (-2212));
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRenderer(3888);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(symbolAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 10, (-769.268F), (-4348.68F));
      Rectangle2D rectangle2D0 = symbolAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, true, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker(13, (Marker) categoryMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      IntervalMarker intervalMarker0 = new IntervalMarker(Double.NaN, (-3082.2));
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(7, (Marker) intervalMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getDomainAxisEdge((-1908));
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, (-10.0), combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      combinedRangeXYPlot0.isRangePannable();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, (ValueAxis) null, xYBezierRenderer0);
      xYPlot0.getDataset(3107);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      combinedRangeXYPlot0.isRangeCrosshairVisible();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) null);
      XYPlot xYPlot0 = (XYPlot)combinedDomainXYPlot0.clone();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot1.setRangeMinorGridlineStroke(xYErrorRenderer0.DEFAULT_STROKE);
      boolean boolean0 = combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(numberAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>(numberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      combinedDomainXYPlot1.setRangeAxes(valueAxisArray0);
      assertEquals(7, combinedDomainXYPlot1.getRangeAxisCount());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) vectorRenderer0, false);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot2 = (CombinedDomainXYPlot)combinedDomainXYPlot1.clone();
      boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot2);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultIntervalXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      int int0 = xYPlot0.getSeriesCount();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, 1.0F);
      CombinedRangeXYPlot<ItemLabelAnchor> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ItemLabelAnchor>();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot<ItemLabelAnchor> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ItemLabelAnchor>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes((-1.7976931348623157E308), plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, 1.0F);
      CombinedRangeXYPlot<ItemLabelAnchor> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ItemLabelAnchor>();
      combinedRangeXYPlot0.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[20];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes(3786.0, (-1509.19186372), plotRenderingInfo0, (Point2D) null);
      assertEquals(20, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, 1.0E-8, plotRenderingInfo0, (Point2D) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Point2D.Float point2D_Float0 = new Point2D.Float(500, 500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      combinedDomainXYPlot0.panDomainAxes(0.05, plotRenderingInfo0, point2D_Float0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedRangeXYPlot<Character> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Character>();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedRangeXYPlot<CenterTextMode> combinedRangeXYPlot0 = new CombinedRangeXYPlot<CenterTextMode>();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      xYPlot0.setRangeCrosshairVisible(true);
      assertTrue(xYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot<CenterTextMode> combinedDomainXYPlot0 = new CombinedDomainXYPlot<CenterTextMode>();
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CombinedDomainXYPlot<Character> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Character>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYPlot1, true);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.annotationChanged((AnnotationChangeEvent) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(500, 500, plotRenderingInfo0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      JFreeChart jFreeChart0 = new JFreeChart("qIA)@QX}i%Yy<a", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.05, 0.92, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.NONE;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(334, xYSplineRenderer_FillType0);
      Paint paint0 = xYSplineRenderer0.getItemFillPaint(3895, 500);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 0.05, dateAxis0, dateAxis0.DEFAULT_TICK_MARK_STROKE, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      CombinedDomainXYPlot<ChronoLocalDate> combinedDomainXYPlot0 = new CombinedDomainXYPlot<ChronoLocalDate>(dateAxis0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, (-2833.152), dateAxis0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "qo+x~");
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, (Rectangle2D) null, 1146.0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.76, (double) 1.0F, 1650.060067474);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D0, 2074485, layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      BufferedImage bufferedImage0 = new BufferedImage(145, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle0, 20, layer0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      JFreeChart jFreeChart0 = new JFreeChart("aye", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1350, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ArrayList<ValueTick> arrayList0 = new ArrayList<ValueTick>();
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Float0, arrayList0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.05);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>((XYDataset<Integer>) null, cyclicNumberAxis0, numberAxis0, standardXYItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", numberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      jFreeChart0.createBufferedImage(1016, 500);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":N*");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      ArrayList<ValueTick> arrayList0 = new ArrayList<ValueTick>();
      combinedRangeXYPlot0.drawDomainGridlines(graphics2D0, rectangle0, arrayList0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point point0 = new Point(10, 10);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = combinedRangeXYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, (double) 1.0F, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, rectangle2D0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.setRangeCrosshairLockedOnData(false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(3802, 1146);
      assertFalse(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DefaultBoxAndWhiskerXYDataset<Integer> defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset<Integer>((Integer) dateAxis0.MAXIMUM_TICK_COUNT);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultBoxAndWhiskerXYDataset0, dateAxis0, dateAxis0, standardXYItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", xYPlot0);
      jFreeChart0.createBufferedImage(203, 500);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      JFreeChart jFreeChart0 = new JFreeChart(".wN>0i", xYPlot0);
      jFreeChart0.createBufferedImage(554, 1);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("order", font0, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(18, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<ValueTick> vector0 = new Vector<ValueTick>();
      xYPlot0.drawDomainTickBands(graphics2D0, (Rectangle2D) null, vector0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      XYBezierRenderer xYBezierRenderer0 = new XYBezierRenderer();
      DefaultIntervalXYDataset<Integer> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<Integer>();
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(defaultIntervalXYDataset0, 10);
      PeriodAxis periodAxis0 = new PeriodAxis("O[i)/0~0202");
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xYBarDataset0, periodAxis0, periodAxis0, xYBezierRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(35, 701);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle2D0, (AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.clearAnnotations();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      LabelBlock labelBlock0 = new LabelBlock("Not implemented.");
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-832.291873), 2353.23885, 0.0, 1.0F, labelBlock0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(32, (Marker) categoryMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      combinedDomainXYPlot0.clearRangeMarkers((-1));
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(500, dateAxis0.DEFAULT_TICK_LABEL_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-251904096), (Marker) intervalMarker0, layer0, false);
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((-251904096), (Marker) intervalMarker0, layer0, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-251904096), (Marker) intervalMarker0, layer0, true);
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((-251904096), (Marker) intervalMarker0, layer0, true);
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateTickUnit0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 0.93);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(500, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.removeDomainMarker(500, (Marker) categoryMarker0, layer0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedDomainXYPlot<ChronoLocalDate> combinedDomainXYPlot0 = new CombinedDomainXYPlot<ChronoLocalDate>();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.clearDomainMarkers(10);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setQuadrantPaint(0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-440960717), combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-440960717) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1908) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(10, highLowItemLabelGenerator0, (XYURLGenerator) null);
      int int0 = combinedDomainXYPlot0.getIndexOf(xYStepAreaRenderer0);
      assertEquals((-1), int0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      XYSeriesCollection<CenterTextMode> xYSeriesCollection0 = new XYSeriesCollection<CenterTextMode>();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot<CenterTextMode> xYPlot0 = new XYPlot<CenterTextMode>(xYSeriesCollection0, (ValueAxis) null, (ValueAxis) null, deviationRenderer0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(3, xYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      List<Integer> list0 = List.of((Integer) 10, (Integer) 500, (Integer) dateAxis0.MAXIMUM_TICK_COUNT, (Integer) dateAxis0.MAXIMUM_TICK_COUNT, (Integer) xYPlot0.MINIMUM_HEIGHT_TO_DRAW, (Integer) dateAxis0.MAXIMUM_TICK_COUNT, (Integer) 10, (Integer) 10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(500, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be unique.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(7, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XIntervalSeriesCollection<Integer> xIntervalSeriesCollection0 = new XIntervalSeriesCollection<Integer>();
      XYBarDataset<Integer> xYBarDataset0 = new XYBarDataset<Integer>(xIntervalSeriesCollection0, (-4412.5707));
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(xIntervalSeriesCollection0, periodAxis0, periodAxis0, (XYItemRenderer) null);
      xYPlot0.setDataset(10, (XYDataset<Integer>) xYBarDataset0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      MatrixSeriesCollection<Integer> matrixSeriesCollection0 = new MatrixSeriesCollection<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(matrixSeriesCollection0, dateAxis0, dateAxis0, xYSplineRenderer0);
      xYPlot0.setDataset((XYDataset<Integer>) matrixSeriesCollection0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge(0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(RectangleEdge.LEFT, rectangleEdge0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[30];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.configureRangeAxes();
      assertEquals(30, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.clearRangeAxes();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(7, combinedRangeXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      xYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>((ValueAxis) null);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) null);
      combinedDomainXYPlot0.getRangeAxisCount();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(AxisLocation.BOTTOM_OR_LEFT, axisLocation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[30];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.clone();
      assertEquals(30, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertEquals(PlotOrientation.HORIZONTAL, combinedRangeXYPlot0.getOrientation());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.setDomainTickBandPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      xYPlot0.setDomainCrosshairStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      DefaultTableXYDataset<Integer> defaultTableXYDataset0 = new DefaultTableXYDataset<Integer>();
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>(defaultTableXYDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      Point2D.Float point2D_Float0 = new Point2D.Float(2955.447F, 0.0F);
      xYPlot0.setQuadrantOrigin(point2D_Float0);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(cyclicNumberAxis0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      combinedDomainXYPlot0.setDomainCrosshairPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-747.944287815), 10, (-747.944287815), (-1064.342761), combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, numberAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 825.058);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(AxisLocation.BOTTOM_OR_RIGHT, combinedRangeXYPlot0.getDomainAxisLocation());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      XYPlot<ChronoLocalDate> xYPlot0 = new XYPlot<ChronoLocalDate>();
      xYPlot0.setRangePannable(false);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      int int0 = combinedDomainXYPlot0.getWeight();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueMarker valueMarker0 = new ValueMarker(Double.POSITIVE_INFINITY);
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, int0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRendererCount();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "a*N<s9SZ");
      CombinedDomainXYPlot<ChronoLocalDate> combinedDomainXYPlot0 = new CombinedDomainXYPlot<ChronoLocalDate>(cyclicNumberAxis0);
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      Color color0 = (Color)combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-1), color0.getRGB());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(255, color0.getGreen());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(numberAxis0);
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainGridlinePaint();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = combinedRangeCategoryPlot0.getRangeAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(valueAxis0);
      combinedDomainXYPlot0.getDomainAxisCount();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setRangeGridlinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Point2D.Float point2D_Float0 = new Point2D.Float(500, 2.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.isDomainPannable();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CombinedRangeXYPlot<CenterTextMode> combinedRangeXYPlot0 = new CombinedRangeXYPlot<CenterTextMode>();
      combinedRangeXYPlot0.setRangeCrosshairValue(1.0);
      assertEquals(1.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot1 = new CombinedDomainXYPlot<Integer>();
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot1.getLegendItems();
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CombinedDomainXYPlot<UnitType> combinedDomainXYPlot0 = new CombinedDomainXYPlot<UnitType>();
      combinedDomainXYPlot0.getAnnotations();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertEquals(AxisLocation.TOP_OR_RIGHT, combinedDomainXYPlot0.getRangeAxisLocation());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CombinedRangeXYPlot<Locale.Category> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Locale.Category>();
      combinedRangeXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)PolarPlot.DEFAULT_GRIDLINE_STROKE;
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.getSeriesRenderingOrder();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      Paint paint0 = combinedRangeXYPlot0.getDomainTickBandPaint();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(paint0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Stroke stroke0 = combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(stroke0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getShadowGenerator();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Paint paint0 = combinedDomainXYPlot0.getRangeTickBandPaint();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRenderers();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setRangeCrosshairStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      boolean boolean0 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.getPlotType();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.panRangeAxes((-39.19638821949507), (PlotRenderingInfo) null, (Point2D) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("*qq");
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2583.222835519531));
      combinedDomainXYPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float(2.0F, 500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 825.058);
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(cyclicNumberAxis0);
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRenderer();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      boolean boolean0 = combinedDomainXYPlot0.isRangeZoomable();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>(dateAxis0);
      double double0 = combinedRangeXYPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getDomainAxes();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRangeAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setWeight(500);
      assertEquals(500, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.setDomainGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedDomainXYPlot<ChronoLocalDate> combinedDomainXYPlot0 = new CombinedDomainXYPlot<ChronoLocalDate>();
      combinedDomainXYPlot0.getDatasets();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      xYPlot0.setShadowGenerator((ShadowGenerator) null);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getDomainMarkers(layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRangeAxisCount();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CombinedRangeXYPlot<Integer> combinedRangeXYPlot0 = new CombinedRangeXYPlot<Integer>();
      combinedRangeXYPlot0.setDomainCrosshairValue(701.0);
      assertEquals(701.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getRangeAxisEdge();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      combinedDomainXYPlot0.getDatasetCount();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2, basicStroke0.getLineJoin());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(dateAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CombinedDomainXYPlot<Character> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Character>();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "gp%");
      Locale locale0 = Locale.CHINA;
      DateAxis dateAxis0 = new DateAxis((String) null, simpleTimeZone0, locale0);
      combinedDomainXYPlot0.setRangeAxis((-823062033), (ValueAxis) dateAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XYPlot<Integer> xYPlot0 = new XYPlot<Integer>();
      double double0 = xYPlot0.getDomainCrosshairValue();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01);
  }
}
